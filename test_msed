#!/usr/bin/csh
#Save the piped-in input into a file:
cat > t4

#Create a file and put $1 into it, but also add a space in front of it. (The
#space is added so that line 17 below is facilitated. Further, see footnote 1
#for information on why it is argument 1 that gets put into the file):
echo \ $1:q > t5

#Loop through all of the passed-in arguments *except* for the first argument:
foreach i ( `seq 2 $#` )
   #Within the t5 file, iteratively look for the $2, then the $3, etc.
   #If you find a match, create a new file t6, where the argument is replaced
   #by the actual argument value. (See footnote 2 in the README file for more
   #info on what I mean by saying the argument is replaced by its value, and
   #also for info on how to not be fooled by back-quoted $s.):
   cat t5 | sed 's/\([^\\]\)$'$i'/\1'$argv[$i]'/g' > t6
   #Now move t6 back to t5, so that we are ready to set up the next argument.
   mv t6 t5
   #Since we're done processing this argument, remove it from argv, but not if
   #it's a flag that starts with a "-" (but remember that Cshell if-conditions
   #have a problem to overcome, when testing things that start with a "-").
   
   # if ( ____________ ) set ______________
end

#Now we want to use almost every ";" into a line separation.
#   A line separator? Yes: The ";" becomes "\n;"
#   Almost every? Yes: because we DON'T want to do it for "\;". (See footnote
#   3 in the README file for more info on our strategy in handling backquoting
#   and also its limitations.)
#We also want to get rid of the space added by line 8, above:
cat t5 | sed 's/\\\\/\\h/g;s/\\;/\\f/g;s/;/\n;/g' > t6

sed 1,53d < test_msed > t7


#And now we are done with cshell:
exit 0
#The rest of this file is sed code (see line 35, above)
#
#The section below here puts individual sed commands on individual lines.
#The issue is to clean up "y", "s", or "\" commands, because these commands
#can have ";" inside them - and if they did have ";", then these ";" will have
#caused line separations on Line 32, above. We need to recogize if the current
#line starts with a "y", "s" or "\" *and* is incomplete. In that case, bring
#in additional line(s), until the full command is on one line.
#Note: This is a full section using multiple branches.
#Note: All of the following should get pulled into one line each:
#      s/;/;/  or  s;a;b;  or  y;,\;;\;,;  or  \;a;b;  or  /;;/p   or   etc.
#Note: But, to keep things simple, we won't worry about: "[;]".
#Note: In our new version of sed, we like the fact that ";" will cause breaks
#      for i, a, c, C, w, W, r.
:x;s/\n//;tm;:m;s/^[^s]/&/;tn;s/s\(.\).*\1.*\1[;\n]*/&/;tn;N;Tx;:n # 處理s開頭，內有;的情形
:x;s/\n//;tm;:m;s/^;[^s]/&/;tn;s/s\(.\).*\1.*\1[;\n]*/&/;tn;N;Tx;:n # 處理;s開頭，內有;的情形

:x;s/\n//;tm;:m;s/^[^y]/&/;tn;s/y\(.\).*\1.*\1[;\n]*/&/;tn;N;Tx;:n # 處理y開頭，內有;的情形
:x;s/\n//;tm;:m;s/^;[^y]/&/;tn;s/y\(.\).*\1.*\1[;\n]*/&/;tn;N;Tx;:n # 處理;y開頭，內有;的情形

:x;s/\n//;tm;:m;s/^[^/]/&/;tn;s,/.*/,&,p;tn;N;Tx;:n # 開頭是/，內有;的情形
:x;s/\n//;tm;:m;s/^;[^/]/&/;tn;s,/.*/,&,p;tn;N;Tx;:n # 開頭是;/，內有;的情形
_________
_________
    .
    .
    .
_________
#
#Now get rid of ";" that aren't needed because they're at the start of line:
s/^;//
#
#So now we have whole sed commands on lines.
#Complete the lines below:
s,^Z,_____________,
s,^C\(.*\),_____________,
s,^W\(.*\),{____________},
s,^D,{_____________},
s,^f,_____________,
#
#Next one uses generic labels, but line 63 above is needed to get them unique:
s_^F_tlabel7;:label7_
#
#These add an unusual symbol ("\v", which doesn't occur in the input) to mark
#out the $-#, so that line 63 above can find them and convert them:
s_^\$-_&\v_
s_, *\$-_&\v_
#
#These clean up the backquotes:
s_\f_\\;_g
s_\h_\\\\_g
